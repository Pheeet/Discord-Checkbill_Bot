import discord
from discord.ext import commands
import os
import asyncio
import aiohttp
from dotenv import load_dotenv
import logging
import re
from flask import Flask
from threading import Thread

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('slip_bot')

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ Config ‡∏à‡∏≤‡∏Å .env ---
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
try:
    SLIP_CHANNEL_ID = int(os.getenv("SLIP_CHANNEL_ID"))
    STATUS_CHANNEL_ID = int(os.getenv("STATUS_CHANNEL_ID"))
except (ValueError, TypeError):
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SLIP_CHANNEL_ID ‡∏´‡∏£‡∏∑‡∏≠ STATUS_CHANNEL_ID ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
    exit()

if not TOKEN:
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô .env")
    exit()

# --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SlipOK API ---
SLIP_API_KEY = os.getenv("SLIP_API_KEY")
SLIP_API_ID = os.getenv("SLIP_API_ID", "55097")
SLIP_API_URL = f"https://api.slipok.com/api/line/apikey/{SLIP_API_ID}"

if not SLIP_API_KEY:
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SLIP_API_KEY ‡πÉ‡∏ô .env")
    exit()

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- Flask Web Server (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render Web Service) ---
app = Flask('')

@app.route('/')
def home():
    return "Bot is running!", 200

@app.route('/health')
def health():
    return {"status": "healthy", "bot": str(bot.user)}, 200

def run_flask():
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)

def keep_alive():
    t = Thread(target=run_flask, daemon=True)
    t.start()
    logger.info(f"Flask server started on port {os.environ.get('PORT', 10000)}")


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status Channel ---
async def update_status_channel(member, months_to_add):
    """
    ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status channel ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‚úÖ ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á member
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    try:
        status_channel = bot.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Status Channel ID: {STATUS_CHANNEL_ID}")
            return False

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á member ‡∏ô‡∏µ‡πâ
        found_message = None
        async for msg in status_channel.history(limit=100):
            if msg.author == bot.user and member.mention in msg.content:
                if msg.content.startswith(f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention}"):
                    found_message = msg
                    break

        checkmarks_to_add = "‚úÖ " * months_to_add

        if found_message:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏° - ‡πÄ‡∏û‡∏¥‡πà‡∏° ‚úÖ
            old_content = found_message.content
            lines = old_content.split('\n')
            first_line = lines[0]
            new_content = first_line + checkmarks_to_add

            if len(lines) > 1:
                new_content += '\n' + '\n'.join(lines[1:])

            await found_message.edit(content=new_content)
            logger.info(f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á {member} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            await status_channel.send(
                f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention} : {checkmarks_to_add}"
            )
            logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {member} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        return True

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status Channel: {e}")
        return False


@bot.event
async def on_ready():
    logger.info(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô {bot.user}")
    logger.info(f"üëÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á ID: {SLIP_CHANNEL_ID}")
    logger.info(f"üìä Status Channel ID: {STATUS_CHANNEL_ID}")
    logger.info(f"üöÄ ‡πÉ‡∏ä‡πâ SlipOK API: {SLIP_API_URL}")
    logger.info(f"üîë API Key: {'*' * 8} (hidden for security)")


@bot.command()
@commands.has_permissions(administrator=True)
async def verify(ctx, member: discord.Member, months: int = 1):
    """
    (Admin) ‡πÄ‡∏û‡∏¥‡πà‡∏° ‚úÖ ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô Status Channel
    """
    try:
        success = await update_status_channel(member, months)
        if success:
            await ctx.send(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ {member.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        else:
            await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ {member.mention}")
    except Exception as e:
        logger.error(f"Error in verify command: {e}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


@verify.error
async def verify_error(ctx, error):
    if isinstance(error, commands.MemberNotFound):
        await ctx.send(
            "‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`\n\n"
            "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n"
            "‚Ä¢ `!verify @Alice 1` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Alice 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
            "‚Ä¢ `!verify @Bob 3` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Bob 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
        )
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(
            "‚ùå **‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`"
        )
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)")


@bot.command()
@commands.has_permissions(administrator=True)
async def monthly_reset(ctx):
    """
    (Admin) ‡∏•‡∏î ‚úÖ ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô Status Channel ‡∏•‡∏á 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    """
    try:
        status_channel = bot.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Status Channel ID: {STATUS_CHANNEL_ID}")
            return

        confirm_msg = await ctx.send(
            "**‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏î ‚úÖ ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏•‡∏á 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**"
        )
        await confirm_msg.add_reaction("‚úÖ")
        await asyncio.sleep(0.5)  # ‡∏£‡∏≠ 0.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        await confirm_msg.add_reaction("‚ùå")

        def check(reaction, user):
            return (
                user == ctx.author and
                str(reaction.emoji) in ["‚úÖ", "‚ùå"] and
                reaction.message.id == confirm_msg.id
            )

        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)

            if str(reaction.emoji) == "‚ùå":
                await ctx.send("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
                return

            processing_msg = await ctx.send("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")

            members_data = []

            async for message in status_channel.history(limit=200):
                if message.author == bot.user and message.content.startswith("üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á:"):
                    try:
                        lines = message.content.split('\n')
                        first_line = lines[0]
                        checkmark_count = message.content.count("‚úÖ")

                        if '<@' in first_line:
                            member_id_match = re.search(r'<@!?(\d+)>', first_line)
                            if member_id_match:
                                member_id = int(member_id_match.group(1))
                                member = ctx.guild.get_member(member_id)

                                if member:
                                    new_checkmarks = checkmark_count - 1
                                    if new_checkmarks > 0:
                                        members_data.append({
                                            'member': member,
                                            'checkmarks': new_checkmarks
                                        })

                        await message.delete()
                        await asyncio.sleep(0.2)

                    except Exception as e:
                        logger.error(f"Error processing message: {e}")

            if members_data:
                members_data.sort(key=lambda x: x['checkmarks'], reverse=True)

                for data in members_data:
                    member = data['member']
                    checkmarks = "‚úÖ " * data['checkmarks']
                    await status_channel.send(
                        f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention} : {checkmarks}"
                    )
                    await asyncio.sleep(0.2)

            total_members = len(members_data)
            result_msg = (
                f"‚úÖ **‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!** ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: {ctx.author.mention}"
            )
            await processing_msg.edit(content=result_msg)
            logger.info(f"Monthly reset: {total_members} members remaining")

        except asyncio.TimeoutError:
            await ctx.send("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß")

    except Exception as e:
        logger.error(f"Error in monthly_reset: {e}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


@monthly_reset.error
async def monthly_reset_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)")


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    await bot.process_commands(message)

    if message.channel.id == SLIP_CHANNEL_ID and message.attachments:
        for attachment in message.attachments:
            if attachment.content_type in ['image/png', 'image/jpeg', 'image/jpg']:
                logger.info(f"Processing slip from {message.author}: {attachment.filename}")

                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(attachment.url) as img_response:
                            if img_response.status != 200:
                                await message.channel.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                                continue
                            image_data = await img_response.read()

                    form = aiohttp.FormData()
                    form.add_field('files', image_data, filename=attachment.filename, content_type=attachment.content_type)
                    form.add_field('log', 'true')

                    headers = {'x-authorization': SLIP_API_KEY}

                    async with aiohttp.ClientSession() as session:
                        async with session.post(SLIP_API_URL, data=form, headers=headers, timeout=aiohttp.ClientTimeout(total=30)) as response:
                            response_text = await response.text()
                            logger.info(f"API Response Status: {response.status}")

                            try:
                                result = await response.json()
                            except Exception as json_error:
                                logger.error(f"JSON Parse Error: {json_error}")
                                await message.channel.send(f"‚ùå API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                                continue

                            if response.status == 200 and result.get('success', False):
                                data = result.get('data', {})
                                receiver_name = data.get('receiver', {}).get('displayName', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')
                                receiver_account = data.get('receiver', {}).get('account', {}).get('value', 'N/A')
                                sender_name = data.get('sender', {}).get('displayName', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')
                                sender_account = data.get('sender', {}).get('account', {}).get('value', 'N/A')
                                amount = data.get('amount', 0)
                                ref = data.get('transRef', 'N/A')
                                date_time = data.get('transDate', '') + ' ' + data.get('transTime', '')

                                months = int(amount // 60)
                                if months < 1:
                                    months = 1

                                checkmarks = "‚úÖ " * months

                                await message.channel.send(
                                    f"‚úÖ **‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**\n"
                                    f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {message.author.mention}\n\n"
                                    f"üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: **{amount:,.2f} ‡∏ö‡∏≤‡∏ó**\n"
                                    f"üì§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô: {sender_name}\n"
                                    f"üì• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: {receiver_name}\n"
                                    f"üî¢ Ref: {ref}\n"
                                    f"üìÖ {date_time}\n\n"
                                    f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: **{months}** {checkmarks}\n\n"
                                    f"üéÅ **‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£?**\n"
                                    f"‚Ä¢ mention (@) ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÑ‡∏î‡πâ {months} ‡∏Ñ‡∏ô)\n"
                                    f"‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå `‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á\n"
                                    f"(60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"
                                )

                                def msg_check(m):
                                    return m.author == message.author and m.channel == message.channel

                                try:
                                    user_msg = await bot.wait_for('message', timeout=60.0, check=msg_check)

                                    if user_msg.content.strip().lower() in ['‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', '‡∏ï‡∏ô‡πÄ‡∏≠‡∏á', 'me']:
                                        success = await update_status_channel(message.author, months)
                                        if success:
                                            await message.channel.send(f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {message.author.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")

                                    elif len(user_msg.mentions) > 0:
                                        selected_members = user_msg.mentions[:months]

                                        if len(selected_members) == 1:
                                            target = selected_members[0]
                                            success = await update_status_channel(target, months)
                                            if success:
                                                await message.channel.send(
                                                    f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {target.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n"
                                                    f"üéÅ ‡πÇ‡∏î‡∏¢: {message.author.mention}"
                                                )
                                        else:
                                            success_list = []
                                            for target in selected_members:
                                                success = await update_status_channel(target, 1)
                                                if success:
                                                    success_list.append(target.mention)

                                            if success_list:
                                                await message.channel.send(
                                                    f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {', '.join(success_list)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n"
                                                    f"üéÅ ‡πÇ‡∏î‡∏¢: {message.author.mention}"
                                                )
                                    else:
                                        success = await update_status_channel(message.author, months)
                                        if success:
                                            await message.channel.send(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö mention - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")

                                except asyncio.TimeoutError:
                                    success = await update_status_channel(message.author, months)
                                    if success:
                                        await message.channel.send(f"‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")

                            else:
                                error_message = result.get('message', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ')
                                await message.channel.send(f"‚ö†Ô∏è ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô: {error_message}")

                except asyncio.TimeoutError:
                    await message.channel.send(f"‚ùå API Timeout")
                except Exception as e:
                    logger.error(f"Error: {e}", exc_info=True)
                    await message.channel.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")

            else:
                await message.channel.send(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå `{attachment.filename}` ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö")


if __name__ == "__main__":
    logger.info("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Render Web Service ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if os.environ.get('RENDER'):
        logger.info("üåê ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö Render - ‡πÄ‡∏õ‡∏¥‡∏î Flask server")
        keep_alive()
    
    bot.run(TOKEN)