import discord
from discord.ext import commands
import os
import asyncio
import aiohttp
from dotenv import load_dotenv
import logging
import re
from flask import Flask         # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
from threading import Thread    # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('slip_bot')

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ Config ‡∏à‡∏≤‡∏Å .env ---
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
try:
    SLIP_CHANNEL_ID = int(os.getenv("SLIP_CHANNEL_ID"))
    STATUS_CHANNEL_ID = int(os.getenv("STATUS_CHANNEL_ID"))
except (ValueError, TypeError):
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SLIP_CHANNEL_ID ‡∏´‡∏£‡∏∑‡∏≠ STATUS_CHANNEL_ID ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
    exit()

if not TOKEN:
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô .env")
    exit()

# --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SlipOK API ---
SLIP_API_KEY = os.getenv("SLIP_API_KEY") 
SLIP_API_ID = os.getenv("SLIP_API_ID", "55097")
SLIP_API_URL = f"https://api.slipok.com/api/line/apikey/{SLIP_API_ID}"

if not SLIP_API_KEY:
    logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SLIP_API_KEY ‡πÉ‡∏ô .env")
    exit()

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status Channel ---
async def update_status_channel(member, months_to_add):
    """
    ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status channel ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° ‚úÖ ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á member
    ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    """
    try:
        status_channel = bot.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Status Channel ID: {STATUS_CHANNEL_ID}")
            return False
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á member ‡∏ô‡∏µ‡πâ
        found_message = None
        async for msg in status_channel.history(limit=100):
            if msg.author == bot.user and member.mention in msg.content:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á member ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                if msg.content.startswith(f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention}"):
                    found_message = msg
                    break
        
        checkmarks_to_add = "‚úÖ " * months_to_add
        
        if found_message:
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏° - ‡πÄ‡∏û‡∏¥‡πà‡∏° ‚úÖ
            old_content = found_message.content
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            lines = old_content.split('\n')
            first_line = lines[0]
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° checkmarks ‡πÉ‡∏´‡∏°‡πà
            new_content = first_line + checkmarks_to_add
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
            if len(lines) > 1:
                new_content += '\n' + '\n'.join(lines[1:])
            
            await found_message.edit(content=new_content)
            logger.info(f"‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á {member} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
            await status_channel.send(
                f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention} : {checkmarks_to_add}"
            )
            logger.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {member} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status Channel: {e}")
        return False


# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Intents ---
intents = discord.Intents.default()
# ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏≠‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ...
bot = commands.Bot(command_prefix="!", intents=intents)


# --- üîΩ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üîΩ ---
app = Flask('')

@app.route('/')
def home():
    return "I'm alive!"

def run():
  app.run(host='0.0.0.0',port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()
# --- üîº ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° üîº ---


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status Channel ---
async def update_status_channel(member, months_to_add):
# ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ...


@bot.event
async def on_ready():
    logger.info(f"‚úÖ ‡∏ö‡∏≠‡∏ó‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô {bot.user}")
    logger.info(f"üëÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á ID: {SLIP_CHANNEL_ID}")
    logger.info(f"üìä Status Channel ID: {STATUS_CHANNEL_ID}")
    logger.info(f"üöÄ ‡πÉ‡∏ä‡πâ SlipOK API: {SLIP_API_URL}")
    logger.info(f"üîë API Key: {SLIP_API_KEY}")


@bot.command()
@commands.has_permissions(administrator=True)
async def verify(ctx, member: discord.Member, months: int = 1):
    """
    (Admin) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô
    """
    try:
        new_name = f"‚úÖ {member.display_name} (‡∏à‡πà‡∏≤‡∏¢ {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
        if len(new_name) > 32:
            new_name = new_name[:29] + "..."
        await member.edit(nick=new_name)
        await ctx.send(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠ {member.mention} ‡πÄ‡∏õ‡πá‡∏ô '{new_name}' ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
    except discord.Forbidden:
        await ctx.send(f"‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (Permission) ‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ {member.mention}")
    except Exception as e:
        logger.error(f"Error in verify command: {e}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠: {e}")


# Error Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á verify
@verify.error
async def verify_error(ctx, error):
    if isinstance(error, commands.MemberNotFound):
        await ctx.send(
            "‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`\n\n"
            "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n"
            "‚Ä¢ `!verify @Alice 1` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Alice 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
            "‚Ä¢ `!verify @Bob 3` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Bob 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n\n"
            "**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ï‡πâ‡∏≠‡∏á @ (mention) ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏¥‡∏°‡∏û‡πå @username"
        )
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(
            "‚ùå **‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`\n\n"
            "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n"
            "`!verify @Alice 1`"
        )
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)")
    else:
        logger.error(f"Unhandled error in verify command: {error}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}")


# Error Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á verify
@verify.error
async def verify_error(ctx, error):
    if isinstance(error, commands.MemberNotFound):
        await ctx.send(
            "‚ùå **‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`\n\n"
            "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n"
            "‚Ä¢ `!verify @Alice 1` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Alice 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
            "‚Ä¢ `!verify @Bob 3` - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ Bob 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n\n"
            "**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏ï‡πâ‡∏≠‡∏á @ (mention) ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏¥‡∏°‡∏û‡πå @username"
        )
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(
            "‚ùå **‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô**\n\n"
            "**‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**\n"
            "`!verify @username [‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô]`\n\n"
            "**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**\n"
            "`!verify @Alice 1`"
        )
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)")
    else:
        logger.error(f"Unhandled error in verify command: {error}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}")


@bot.command()
@commands.has_permissions(administrator=True)
async def monthly_reset(ctx):
    """
    (Admin) ‡∏•‡∏î ‚úÖ ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô Status Channel ‡∏•‡∏á 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    """
    try:
        status_channel = bot.get_channel(STATUS_CHANNEL_ID)
        if not status_channel:
            await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Status Channel ID: {STATUS_CHANNEL_ID}")
            return
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° reaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        confirm_msg = await ctx.send(
            "‚ö†Ô∏è **‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏î ‚úÖ ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô Status Channel ‡∏•‡∏á 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô**"
        )
        await confirm_msg.add_reaction("‚úÖ")
        await confirm_msg.add_reaction("‚ùå")
        
        def check(reaction, user):
            return (
                user == ctx.author and
                str(reaction.emoji) in ["‚úÖ", "‚ùå"] and
                reaction.message.id == confirm_msg.id
            )
        
        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
            
            if str(reaction.emoji) == "‚ùå":
                await ctx.send("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            members_data = []
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Status Channel
            async for message in status_channel.history(limit=200):
                if message.author == bot.user and message.content.startswith("üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á:"):
                    try:
                        # ‡∏î‡∏∂‡∏á mention ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
                        lines = message.content.split('\n')
                        first_line = lines[0]
                        
                        # ‡∏´‡∏≤ mention ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö ‚úÖ
                        checkmark_count = message.content.count("‚úÖ")
                        
                        # ‡∏î‡∏∂‡∏á member mention (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: @user : ‚úÖ ‚úÖ)
                        if '<@' in first_line:
                            # ‡∏î‡∏∂‡∏á member ID
                            member_id_match = re.search(r'<@!?(\d+)>', first_line)
                            if member_id_match:
                                member_id = int(member_id_match.group(1))
                                member = ctx.guild.get_member(member_id)
                                
                                if member and checkmark_count > 1:
                                    # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - ‡∏•‡∏î‡∏•‡∏á 1
                                    new_checkmarks = checkmark_count - 1
                                    members_data.append({
                                        'member': member,
                                        'checkmarks': new_checkmarks
                                    })
                        
                        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                        await message.delete()
                        await asyncio.sleep(0.3)
                        
                    except Exception as e:
                        logger.error(f"Error processing message: {e}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if members_data:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô checkmarks ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
                members_data.sort(key=lambda x: x['checkmarks'], reverse=True)
                
                for data in members_data:
                    member = data['member']
                    checkmarks = "‚úÖ " * data['checkmarks']
                    
                    await status_channel.send(
                        f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {member.mention} : {checkmarks}"
                    )
                    await asyncio.sleep(0.3)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ rate limit
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            total_members = len(members_data)
            logger.info(f"Monthly reset completed by {ctx.author}: {total_members} members remaining")
        
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
    
    except Exception as e:
        logger.error(f"Error in monthly_reset command: {e}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !verify ‡∏Å‡πà‡∏≠‡∏ô
    await bot.process_commands(message)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö, ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ö‡∏≠‡∏ó
    if message.channel.id == SLIP_CHANNEL_ID and message.attachments:
        
        for attachment in message.attachments:
            if attachment.content_type in ['image/png', 'image/jpeg', 'image/jpg']:
                
                logger.info(f"Processing slip from {message.author}: {attachment.filename}")
                
                try:
                    # --- ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Discord ---
                    async with aiohttp.ClientSession() as session:
                        async with session.get(attachment.url) as img_response:
                            if img_response.status != 200:
                                await message.channel.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
                                continue
                            
                            image_data = await img_response.read()
                    
                    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° form data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SlipOK API
                    form = aiohttp.FormData()
                    form.add_field('files', 
                                   image_data,
                                   filename=attachment.filename,
                                   content_type=attachment.content_type)
                    form.add_field('log', 'true')
                    
                    # ‡∏™‡πà‡∏á Request ‡∏û‡∏£‡πâ‡∏≠‡∏° API Key
                    headers = {
                        'x-authorization': SLIP_API_KEY
                    }
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.post(
                            SLIP_API_URL,
                            data=form,
                            headers=headers,
                            timeout=aiohttp.ClientTimeout(total=30)
                        ) as response:
                            
                            response_text = await response.text()
                            logger.info(f"SlipOK API Response Status: {response.status}")
                            logger.info(f"SlipOK API Response Body: {response_text}")
                            
                            try:
                                result = await response.json()
                            except Exception as json_error:
                                logger.error(f"JSON Parse Error: {json_error}")
                                await message.channel.send(
                                    f"‚ùå API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (HTTP {response.status})\n"
                                    f"Response: {response_text[:200]}"
                                )
                                continue
                            
                            # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ---
                            if response.status == 200:
                                success = result.get('success', False)
                                
                                if success:
                                    # Slip ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                    data = result.get('data', {})
                                    
                                    receiver_name = data.get('receiver', {}).get('displayName', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')
                                    receiver_account = data.get('receiver', {}).get('account', {}).get('value', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')
                                    
                                    sender_name = data.get('sender', {}).get('displayName', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')
                                    sender_account = data.get('sender', {}).get('account', {}).get('value', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ')
                                    
                                    amount = data.get('amount', 0)
                                    ref = data.get('transRef', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç Ref')
                                    date_time = data.get('transDate', '') + ' ' + data.get('transTime', '')
                                    
                                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (60 ‡∏ö‡∏≤‡∏ó = 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
                                    months = int(amount // 60)
                                    if months < 1:
                                        months = 1
                                    
                                    checkmarks = "‚úÖ " * months
                                    
                                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏•‡∏¥‡∏õ
                                    confirmation_msg = await message.channel.send(
                                        f"‚úÖ **‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**\n"
                                        f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {message.author.mention}\n"
                                        f"üìÑ ‡πÑ‡∏ü‡∏•‡πå: `{attachment.filename}`\n\n"
                                        f"**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô:**\n"
                                        f"üí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: **{amount:,.2f} ‡∏ö‡∏≤‡∏ó**\n"
                                        f"üì§ ‡∏ú‡∏π‡πâ‡πÇ‡∏≠‡∏ô: {sender_name} ({sender_account})\n"
                                        f"üì• ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: {receiver_name} ({receiver_account})\n"
                                        f"üî¢ Ref: {ref}\n"
                                        f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà/‡πÄ‡∏ß‡∏•‡∏≤: {date_time}\n"
                                        f"‚úì ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å SlipOK\n\n"
                                        f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: **{months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô** {checkmarks}\n\n"
                                        f"üéÅ **‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô?**\n"
                                        f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ mention (@) ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ {months} ‡∏Ñ‡∏ô)\n"
                                        f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: @username ‡∏´‡∏£‡∏∑‡∏≠ @user1 @user2\n"
                                        f"‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå `‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á\n"
                                        f"(‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"
                                    )
                                    
                                    def msg_check(m):
                                        return m.author == message.author and m.channel == message.channel
                                    
                                    try:
                                        user_msg = await bot.wait_for('message', timeout=60.0, check=msg_check)
                                        
                                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"
                                        if user_msg.content.strip().lower() in ['‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á', '‡∏ï‡∏ô‡πÄ‡∏≠‡∏á', 'me']:
                                            # ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                                            success = await update_status_channel(message.author, months)
                                            if success:
                                                await message.channel.send(
                                                    f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {message.author.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
                                                )
                                        
                                        elif len(user_msg.mentions) > 0:
                                            # ‡∏°‡∏µ mention ‡∏Ñ‡∏ô
                                            selected_members = user_msg.mentions[:months]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                                            
                                            if months == 1:
                                                # 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                                                target = selected_members[0]
                                                success = await update_status_channel(target, 1)
                                                if success:
                                                    await message.channel.send(
                                                        f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {target.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n"
                                                        f"üéÅ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢: {message.author.mention}"
                                                    )
                                            else:
                                                # ‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                                                if len(selected_members) == 1:
                                                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢
                                                    target = selected_members[0]
                                                    success = await update_status_channel(target, months)
                                                    if success:
                                                        await message.channel.send(
                                                            f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {target.mention} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n"
                                                            f"üéÅ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢: {message.author.mention}"
                                                        )
                                                else:
                                                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô - ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô (1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô)
                                                    success_list = []
                                                    for target in selected_members:
                                                        success = await update_status_channel(target, 1)
                                                        if success:
                                                            success_list.append(target.mention)
                                                    
                                                    if success_list:
                                                        await message.channel.send(
                                                            f"‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {', '.join(success_list)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞ 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n"
                                                            f"üéÅ ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢: {message.author.mention}\n"
                                                            f"üìä ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ {len(success_list)} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏à‡∏≤‡∏Å {months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
                                                        )
                                        else:
                                            # ‡πÑ‡∏°‡πà‡∏°‡∏µ mention - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                                            success = await update_status_channel(message.author, months)
                                            if success:
                                                await message.channel.send(
                                                    f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£ mention ‡πÉ‡∏Ñ‡∏£ - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {message.author.mention} (‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á) ‡πÅ‡∏ó‡∏ô ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
                                                )
                                    
                                    except asyncio.TimeoutError:
                                        # ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ - ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                                        success = await update_status_channel(message.author, months)
                                        if success:
                                            await message.channel.send(
                                                f"‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡πâ {message.author.mention} (‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á) ‡πÅ‡∏ó‡∏ô ({months} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"
                                            )
                                
                                else:
                                    # Slip ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                    error_message = result.get('message', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ')
                                    await message.channel.send(
                                        f"‚ö†Ô∏è **‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö**\n"
                                        f"üë§ ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {message.author.mention}\n"
                                        f"üìÑ ‡πÑ‡∏ü‡∏•‡πå: `{attachment.filename}`\n"
                                        f"‚ùå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {error_message}"
                                    )
                            
                            elif response.status == 401 or response.status == 403:
                                await message.channel.send(
                                    f"‚ùå **API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á** (HTTP {response.status})\n"
                                    f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `SLIP_API_KEY` ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env"
                                )
                                logger.error(f"Invalid API Key ({response.status})")
                            
                            else:
                                error_msg = result.get("message", "Unknown error")
                                await message.channel.send(
                                    f"‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ** (HTTP {response.status})\n"
                                    f"‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {error_msg}"
                                )

                except asyncio.TimeoutError:
                    logger.error("API Timeout")
                    await message.channel.send(f"‚ùå API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (Timeout)")
                    
                except aiohttp.ClientError as e:
                    logger.error(f"HTTP Client Error: {e}")
                    await message.channel.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: {e}")
                    
                except Exception as e:
                    logger.error(f"Unexpected error: {e}", exc_info=True)
                    await message.channel.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
                
            else:
                await message.channel.send(
                    f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå `{attachment.filename}` ‡∏Ç‡∏≠‡∏á {message.author.mention} "
                    f"‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (png, jpg, jpeg)"
                )


# Error Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á monthly_reset
@monthly_reset.error
async def monthly_reset_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Administrator)")
    else:
        logger.error(f"Unhandled error in monthly_reset command: {error}")
        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}")
        

if __name__ == "__main__":
    logger.info("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó...")
    keep_alive() # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    bot.run(TOKEN)